
Name: Zhengyuan Zhu
Last 4 digits ID: 8274

CSE 6331, Cloud Computing					


Quiz Q3, 3.30, Summer 2020   (c) DL, UTA, 2020


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please send the link, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here: Z.Z.
     _________________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4a. Using the cloud services provider, all functionality possible should be implemented on that provider.
     (Of course, displaying web pages through a browser and the user interface is "local")

 4b. Upload all data files (*jpg and *csv, not this quiz) to cloud service. 
  
Show and submit code, when each part is complete, raise your hand and then show us:

 To recieve credit you MUST show (demo) AND submit the code (text only) on Canvas.

 5. Show a web page and interface (which resides on the cloud provider) with your name,
    and below that student ID.
    For all questions after this one, on the top of each page, please show your name, 
    then below that your ID.
    Please use a large font.
    The cloud service provider is either MS Azure or IBM Cloud (BlueMix).

 6. Import the datasets into a Relational Data Base (SQL), if you have already done this, (briefly) explain/describe
    how you did this. Please note that for some parts of the following you will need to create indexes (keys)
    appropriately.

    I just use IBM db2 to upload csv file through console and modify all the columns name to upper case.
    

 7. Allow a user, through a web form, to give a three letter country code, and for each year in the data set for that country
    please show the (smoking) prevalence (and country name and code).
    Please show the time to do this query.

      @app.route('/show_prev')
      def show_prev():
         mode = request.args.get('mode1') if request.args.get('mode1') else request.args.get('mode2')
         mode = mode.split(' ')[0]
         start = time.time()
         country_code = request.args.get('code')
         rows=[]
         print('qqqq', country_code)
         
         if mode=='RDB':
            db2conn = ibm_db.connect(db2cred['ssldsn'], "","")    
            if db2conn:
                  sql = "SELECT * FROM SP WHERE CODE=\'{}\';".format(country_code)
                  print('wwww', sql)
                  stmt = ibm_db.exec_immediate(db2conn, sql)
                  
                  result = ibm_db.fetch_assoc(stmt)
                  while result != False:
                     rows.append(result.copy())
                     result = ibm_db.fetch_assoc(stmt)
                  
                  ibm_db.close(db2conn)
                  
         elif mode=='Memcache':
            global cache_sp
            df = cache_sp[cache_sp['CODE']==country_code]
            for _, r in df.iterrows():
                  rows.append(r.to_dict())
            print('rrrr', rows)
            
            
         end = time.time()
         elapse = end - start

         return render_template('show_prev.html', app=appenv, rows=rows, e=elapse)



 8. Allow a user, through a web form, to give either a three letter country code, or a country name, 
    and for each year in the data sets for that country, please show the cost of cigarettes as well as 
    the (smoking) prevalence (for all matching, show country name and code).
    Please show the time to do this query.

      @app.route('/show_cost')
      def show_cost():
         mode = request.args.get('mode1') if request.args.get('mode1') else request.args.get('mode2')
         mode = mode.split(' ')[-1]
         
         code = request.args.get('code') if request.args.get('code') else -1
         name = request.args.get('name') if request.args.get('name') else -1 
         print('zzz', code, name)
         subsql = ''
         if code != -1:
            subsql += 'CODE=\'{}\''.format(code)
         if name != -1:
            subsql += ' AND ENTITY=\'{}\''.format(name)
         print('wwww', subsql, mode)
         rows1 = []
         rows2 = []
         
         start = time.time()
         # connect to DB2
         if mode=='RDB':
            db2conn = ibm_db.connect(db2cred['ssldsn'], "","")
            if db2conn:
                  sql = "SELECT * FROM PC WHERE {};".format(subsql)
                  print(sql)
                  stmt = ibm_db.exec_immediate(db2conn, sql)
                  
                  result = ibm_db.fetch_assoc(stmt)
                  while result != False:
                     rows1.append(result.copy())
                     result = ibm_db.fetch_assoc(stmt)
                     
                  sql = "SELECT * FROM SP WHERE {};".format(subsql)
                  print(sql)
                  stmt = ibm_db.exec_immediate(db2conn, sql)
                  
                  result = ibm_db.fetch_assoc(stmt)
                  while result != False:
                     rows2.append(result.copy())
                     result = ibm_db.fetch_assoc(stmt)

                  ibm_db.close(db2conn)
         
         elif mode=='Memcache':
            global cache_pc
            if code != -1:
                  df1 = cache_pc[cache_pc['CODE']==code]
                  for _, r in df1.iterrows():
                     rows1.append(r.to_dict())
                  
                  df1 = cache_sp[cache_sp['CODE']==code]
                  for _, r in df1.iterrows():
                     rows2.append(r.to_dict())
            if name != -1:
                  df2 = cache_pc[cache_pc['ENTITY']==name]
                  for _, r in df2.iterrows():
                     rows1.append(r.to_dict())
                  df2 = cache_sp[cache_sp['CODE']==code]
                  for _, r in df1.iterrows():
                     rows2.append(r.to_dict())
            
         end = time.time()
         elapse = end - start    
         return render_template('show_cost.html', app=appenv, rows1=rows1, rows2=rows2, e=elapse)

 9. Allow a user, through a web form, to give a year range, and a cost range,  
    please show the (smoking) prevalence and cost for all countries within that range, (and show country name and code).
    Please show the time to do this query.

      @app.route('/show_range')
      def show_range():
         mode = request.args.get('mode1') if request.args.get('mode1') else request.args.get('mode2')
         mode = mode.split(' ')[-1]
         
         range0 = request.args.get('range0') if request.args.get('range0') else -1
         range1 = request.args.get('range1') if request.args.get('range1') else -1
         cost0 = request.args.get('cost0') if request.args.get('cost0') else -1 
         cost1 = request.args.get('cost1') if request.args.get('cost1') else -1 
         times = request.args.get('time') if request.args.get('time') else 1 
         print('zzz', range0, range1, cost0, cost1)
         subsql0 = ''
         subsql1 = ''
         if range0!=-1 and range1!=-1:
            subsql0 += 'YEAR>={} AND YEAR<={}'.format(range0, range1)
         if cost0!=-1 and cost1!=-1:
            subsql1 += 'COST>={} AND COST<=\'{}\''.format(cost0, cost1)
         print('wwww', subsql0, subsql1)
         rows1 = []
         rows2 = []
         
         start = time.time()
         for _ in range(times):
            # connect to DB2
            if mode=='RDB':
                  db2conn = ibm_db.connect(db2cred['ssldsn'], "","")
                  if db2conn:
                     sql = "SELECT * FROM PC WHERE {} AND {};".format(subsql0, subsql1)
                     print(sql)
                     stmt = ibm_db.exec_immediate(db2conn, sql)
                     
                     result = ibm_db.fetch_assoc(stmt)
                     while result != False:
                        rows1.append(result.copy())
                        result = ibm_db.fetch_assoc(stmt)
                        
                     sql = "SELECT * FROM SP WHERE {};".format(subsql0)
                     print(sql)
                     stmt = ibm_db.exec_immediate(db2conn, sql)
                     
                     result = ibm_db.fetch_assoc(stmt)
                     while result != False:
                        rows2.append(result.copy())
                        result = ibm_db.fetch_assoc(stmt)

                     ibm_db.close(db2conn)
                     print(rows1, rows2)
            
            elif mode=='Memcache':
                  pass
                  # global cache_pc
                  # if code != -1:
                  #     df1 = cache_pc[cache_pc['CODE']==code]
                  #     for _, r in df1.iterrows():
                  #         rows1.append(r.to_dict())
                     
                  #     df1 = cache_sp[cache_sp['CODE']==code]
                  #     for _, r in df1.iterrows():
                  #         rows2.append(r.to_dict())
                  # if name != -1:
                  #     df2 = cache_pc[cache_pc['ENTITY']==name]
                  #     for _, r in df2.iterrows():
                  #         rows1.append(r.to_dict())
                  #     df2 = cache_sp[cache_sp['CODE']==code]
                  #     for _, r in df1.iterrows():
                  #         rows2.append(r.to_dict())
                  
         end = time.time()
         elapse = end - start    
         return render_template('show_range.html', app=appenv, rows1=rows1, rows2=rows2, e=elapse)

 10. A user will give you the number of times to do the "query", you will do the previous steps 8. and 9. that number of times 
     and show the results as well as the total time taken. 

     The answer is in previous codes

 11. Repeat 10. using an in-memory caching mechanism (NOT an in-memory database) repeat the previous step, then show us.

      The answer is in previous codes

 12a. Show us, in a link, the application running and we will try it out. Only for parts 7, 8, 9, 10, 11

      http://zzy824.us-south.cf.appdomain.cloud/

 12b. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.
